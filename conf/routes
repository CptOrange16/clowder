# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                 controllers.Application.index


# Users
GET     /users                            controllers.Users.list
GET     /users/by-country/:country        controllers.Users.listByCountry(country)
GET     /users/create/:username           controllers.Users.create(username)
GET     /users/view/:id                   controllers.Users.view(id)

# Files
GET		/files					          controllers.Files.list(when: String ?= "", date: String ?= "", size: Int ?= 11)
GET		/files/new					      controllers.Files.uploadFile
GET		/files/:id					      controllers.Files.file(id)
POST    /files/:id/comment                controllers.Files.comment(id)
GET		/files/:id/blob			          controllers.Files.download(id)
GET     /queries/:id/blob				  controllers.Files.downloadquery(id)	
#GET     /files/:id/similar                controllers.Files.findSimilar(id)
POST    /upload					          controllers.Files.upload
POST   /uploadSelect                      controllers.Files.uploadSelect
POST   /uploadSelectQuery                 controllers.Files.uploadSelectQuery   
POST   	/uploadAjax						  controllers.Files.uploadAjax
POST   	/uploaddnd/:id					  controllers.Files.uploaddnd(id)
#POST  	/reactiveUpload					  controllers.Files.reactiveUpload
POST    /uploadDragDrop					  controllers.Files.uploadDragDrop

# Datasets
GET		/datasets					      controllers.Datasets.list(when: String ?= "", date: String ?= "", size: Int ?= 11)
GET     /datasets/new                     controllers.Datasets.newDataset
GET		/datasets/:id					  controllers.Datasets.dataset(id)
#POST	/datasets/:id/comment             controllers.Datasets.comment(id)
GET     /datasets_by_section/:id          controllers.Datasets.datasetBySection(id)
POST    /dataset/submit                   controllers.Datasets.submit

# Tags
POST    /tags		                      controllers.Tags.tag
GET     /tags/search/:tag		          controllers.Tags.search(tag)

# Authentication
GET     /loginTest                        controllers.Authentication.login
POST    /loginTest                        controllers.Authentication.loginSubmit

# Search
GET   	 /search                            controllers.Search.search(query: String ?= "")
GET    	 /multimediasearch                  controllers.Search.multimediasearch
#GET     /multimediaserach1                 controllers.Search.multimediasearch1(f,id)
GET      /advanced						    controllers.Search.advanced
GET      /SearchByText						controllers.Search.SearchByText(query: String ?= "")
POST  	 /uploadquery						controllers.Search.uploadquery	
GET      /searchbyURL                       controllers.Search.searchbyURL(query:String?="")
GET      /Filterby                          controllers.Search.Filterby(id)
GET      /searchbyfeature					controllers.Search.searchMultimediaIndex(section_id)
#GET     /files/:id/similar                  controllers.Search.findSimilar(id)
GET    /queries/:id/similar					controllers.Search.findSimilar(id)

# Previewers
GET    /previewers/list                   controllers.Previewers.list	

# Map static resources from the /public folder to the /assets URL path
GET     /assets/img/glyphicons-halflings-white.png      controllers.Assets.at(path="/public", file="/images/glyphicons-halflings-white.png")
GET     /assets/img/glyphicons-halflings.png            controllers.Assets.at(path="/public", file="/images/glyphicons-halflings.png")
GET     /assets/*file                     controllers.Assets.at(path="/public", file)

# test json
GET		/test						      controllers.Application.testJson

## SecureSocial ##

# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized

# Administration pages
GET     /admin                      controllers.Admin.main
GET     /admin/test                 controllers.Admin.test
GET     /admin/secureTest           controllers.Admin.secureTest
GET     /admin/reindexFiles         controllers.Admin.reindexFiles

# Javascript Endpoints
GET     /javascriptRoutes           controllers.Application.javascriptRoutes

# API documentation using Swagger
GET     /api-docs.json        controllers.ApiHelpController.getResources

# Rest API
POST	/api/files/:three_d_file_id/geometries/:geometry_id			api.Files.attachGeometry(three_d_file_id,geometry_id)
GET     /api/files                        						api.Files.list
POST    /api/files                        						api.Files.upload
POST	/api/files/uploadIntermediate/:id						api.Files.uploadIntermediate(id) 
GET     /api/files/:id/metadata           						api.Files.get(id)
POST    /api/files/:id/metadata           						api.Files.addMetadata(id)
POST    /api/files/:id/previews/:p_id     						api.Files.attachPreview(id, p_id)
GET		/api/files/:id/listpreviews		  						api.Files.filePreviewsList(id)
GET		/api/files/:three_d_file_id/:filename					api.Files.getGeometry(three_d_file_id,filename)
GET     /api/files/:id                    						api.Files.download(id)

GET     /api-docs.json/datasets           controllers.ApiHelpController.getResource(path = "/api-docs.json/datasets")
POST    /api/datasets/:id/metadata		  api.Datasets.addMetadata(id)
POST    /api/datasets/:id/usermetadata	  api.Datasets.addUserMetadata(id)
GET 	/api/datasets/:id/listFiles		  api.Datasets.datasetFilesList(id)

GET     /api/previews/:preview_id/textures/dataset/:datasetid/json					api.Previews.downloadPreview(preview_id, datasetid)
GET     /api/previews/:preview_id/textures/dataset/:dataset_id//:filename			api.Files.downloadByDatasetAndFilename(dataset_id, filename, preview_id)
GET		/api/previews/:dzi_id_dir/:level/:filename									api.Previews.getTile(dzi_id_dir, level, filename)
POST    /api/previews/:dzi_id/tiles/:tile_id/:level     							api.Previews.attachTile(dzi_id, tile_id, level)
POST    /api/previews/:id/metadata        											api.Previews.uploadMetadata(id)
GET     /api/previews/:id/metadata        											api.Previews.getMetadata(id)
GET     /api/previews/:id                 											api.Previews.download(id)
POST    /api/previews                     											api.Previews.upload

POST    /api/indexes                      api.Indexes.index
POST    /api/indexes/features             api.Indexes.features

POST    /api/sections                     api.Sections.add
GET     /api/sections/:id                 api.Sections.get(id)

POST    /api/geostreams					  api.Geostreams.createStream()
POST    /api/geostreams/:id               api.Geostreams.addDatapoint(id)
GET     /api/geostreams/search            api.Geostreams.search(since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None)

POST	/api/tiles						  api.ZoomIt.uploadTile
POST	/api/geometries					  api.Geometry.uploadGeometry
